#include <stddef.h>
// C returns a structure. Results are compared by way of strings. See "Examples" tab.
typedef long long ll;
// sz is array size.
typedef struct Data Data;
struct Data {
     ll* array;
     int sz;
};

int isPrime (long long n){

    for(long long i = 2; i * i <= n; i++){
        if(n %i == 0)
            return 0;
    }

    return 1;
}

long long reverse_number (long long n){

    long long res = 0;
    long long multiplier = 1;
    int length = snprintf(NULL, 0, "%lld", n);
    int arr[length];
    int i = 0;

    while(n > 0){
        arr[i] = n % 10;
        n /= 10;
        i++;
    }

    for(int i = length - 1; i >= 0; i--){
        res += arr[i] * multiplier;
        multiplier *= 10;
    }

    return res;
}

long long comp(const void *a, const void *b){

    return *(long long*)a - *(long long*)b;

}

Data* backwardsPrime(ll start, ll end) {
  
  struct Data *res = malloc(1 * sizeof(Data*));
    res->sz = 0;
    res->array = malloc(res->sz * sizeof(long long));

    for(long long i = start; i <= end; i++){
        if(isPrime(i)){
            long long reverse = reverse_number(i);
            if(reverse != i & isPrime(reverse)){
                res->array = (long long*)realloc(res->array, (res->sz + 1) * sizeof(long long));
                res->array[res->sz] = i;
                res->sz++;
            }
        }
    }

    qsort(res->array, res->sz, sizeof(long long), comp);
    return res;
    
}
